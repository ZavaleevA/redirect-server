<?php
session_start(); // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

require 'vendor/autoload.php'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT

use \Firebase\JWT\JWT;
use \Firebase\JWT\Key;
use SendGrid\Mail\Mail;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
$host = 'autorack.proxy.rlwy.net';
$port = 24942;
$username = 'root';
$password = 'qoYVjZFmyggcSrdOBuIPXaxMZghjrdjA';
$dbname = 'railway';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
$dsn = "mysql:host=$host;port=$port;dbname=$dbname";
try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ PDO –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    $pdo = new PDO($dsn, $username, $password);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—à–∏–±–æ–∫
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo "Failed to connect to the database: " . $e->getMessage();
    exit();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ IPQualityScore API
function isLegitimateIp($ip) {
    $apiKey = '4xf4Fuv7vE80ZAWeaITrCoUaBPIGQYRv'; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á
    $url = "https://www.ipqualityscore.com/api/json/ip/$apiKey/$ip";
    
    $response = file_get_contents($url);
    if ($response === false) {
        return false; // –û—à–∏–±–∫–∞ API
    }

    $data = json_decode($response, true);
    if ($data['success'] && $data['fraud_score'] < 75 && !$data['proxy']) {
        return true; // –õ–µ–≥–∏—Ç–∏–º–Ω—ã–π IP
    }
    return false; // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ IP
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
function logRequest($ip, $userAgent, $status) {
    $logFile = __DIR__ . '/requests.log';
    $logEntry = sprintf(
        "[%s] IP: %s, User-Agent: %s, Status: %s%s",
        date('Y-m-d H:i:s'),
        $ip,
        $userAgent,
        $status,
        PHP_EOL
    );
    file_put_contents($logFile, $logEntry, FILE_APPEND);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
function sendAlert($ip, $userAgent) {
    $email = new Mail(); 
    $email->setFrom("zavaleev.sbase@gmail.com", "Security Alert System");
    $email->setSubject("üö® Suspicious Activity Detected");
    $email->addTo("zavaleev.sbase@gmail.com", "Admin");
    $email->addContent(
        "text/html",
        "
        <!DOCTYPE html>
        <html lang='en'>
        <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>Suspicious Activity Alert</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 0;
                    background-color: #f8f9fa;
                }
                .container {
                    max-width: 600px;
                    margin: 20px auto;
                    background: #fff;
                    border: 1px solid #ddd;
                    border-radius: 10px;
                    padding: 20px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }
                .header {
                    text-align: center;
                    padding: 15px 0;
                    background-color: #dc3545;
                    color: white;
                    border-radius: 10px 10px 0 0;
                    font-size: 24px;
                }
                .content {
                    padding: 20px;
                }
                .details {
                    background-color: #f1f1f1;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 10px 0;
                }
                .details p {
                    margin: 5px 0;
                }
                .footer {
                    text-align: center;
                    font-size: 12px;
                    color: #555;
                    margin-top: 20px;
                }
                a {
                    color: #dc3545;
                    text-decoration: none;
                }
            </style>
        </head>
        <body>
            <div class='container'>
                <div class='header'>
                    Suspicious Activity Alert üö®
                </div>
                <div class='content'>
                    <p><strong>Attention Admin,</strong></p>
                    <p>Suspicious activity has been detected on your system. Below are the details of the activity:</p>
                    <div class='details'>
                        <p><strong>IP Address:</strong> $ip</p>
                        <p><strong>User-Agent:</strong> $userAgent</p>
                        <p><strong>Time:</strong> " . date('Y-m-d H:i:s') . "</p>
                    </div>
                    <p>Please investigate this activity immediately and take the necessary actions.</p>
                    <p>For more details, log into the admin panel or check the logs.</p>
                </div>
                <div class='footer'>
                    <p>&copy; 2025 Security Alert System. All Rights Reserved.</p>
                </div>
            </div>
        </body>
        </html>
        "
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SendGrid API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
    $sendgrid = new \SendGrid('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'); // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á SendGrid
    try {
        $response = $sendgrid->send($email);
    } catch (Exception $e) {
        echo 'SendGrid error: ' . $e->getMessage();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
    $userIp = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR'])[0]; // –ü–µ—Ä–≤—ã–π IP –∏–∑ —Ü–µ–ø–æ—á–∫–∏
} else {
    $userIp = $_SERVER['REMOTE_ADDR'];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ User-Agent –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞–º
$userAgent = $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown';
if (preg_match('/bot|crawl|slurp|spider|curl|wget|python|scrapy|httpclient|headless|java|fetch|urllib|perl|go-http|axios|http-request|libwww|httpclient|okhttp|mechanize|node-fetch|phantomjs|selenium|guzzle|aiohttp|http-kit|restsharp|ruby|cfnetwork|go-http-client/i', $userAgent)) {
    logRequest($userIp, $userAgent, 'Bot');
    http_response_code(403);
    die("Bots are not allowed");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞
if (!isset($_SESSION['last_ip']) || $_SESSION['last_ip'] !== $userIp) {
    // IP –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    $_SESSION['last_ip'] = $userIp; // –û–±–Ω–æ–≤–ª—è–µ–º IP –≤ —Å–µ—Å—Å–∏–∏
    unset($_SESSION['recaptcha_verified']); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ø—á–∏
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç–∏ IP —á–µ—Ä–µ–∑ API
if (!isset($_SESSION['recaptcha_verified'])) {
    if (!isLegitimateIp($userIp)) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            logRequest($userIp, $userAgent, 'Suspicious IP');
            sendAlert($userIp, $userAgent); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            $recaptchaSecret = '6LeQM8UqAAAAACYvWnAtLXloTJVia5Yf7XGI98kf'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á reCAPTCHA
            $recaptchaResponse = $_POST['g-recaptcha-response'] ?? '';

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ reCAPTCHA —á–µ—Ä–µ–∑ Google API
            $response = file_get_contents("https://www.google.com/recaptcha/api/siteverify?secret=$recaptchaSecret&response=$recaptchaResponse");
            $result = json_decode($response, true);

            if ($result['success']) {
                logRequest($userIp, $userAgent, 'reCAPTCHA passed');
                $_SESSION['recaptcha_verified'] = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
                header("Location: " . $_SERVER['REQUEST_URI']);
                exit();
            } else {
                logRequest($userIp, $userAgent, 'reCAPTCHA failed');
                echo "Verification failed. Please try again.";
                exit();
            }

        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å reCAPTCHA
        echo '
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Verify Your Identity</title>
            <script src="https://www.google.com/recaptcha/api.js" async defer></script>
        </head>
        <body>
            <h1>Verify Your Identity</h1>
            <p>Your connection appears to come from a VPN or proxy. Please complete the reCAPTCHA below to proceed.</p>
            <form action="" method="POST">
                <div class="g-recaptcha" data-sitekey="6LeQM8UqAAAAAPbOcnZNrwV6DlskDPxZCt-NGObD" data-callback="enableButton"></div>
                <br>
                <input type="submit" value="Verify" id="verifyButton" disabled>
            </form>
            <script>
                function enableButton() {
                    document.getElementById("verifyButton").disabled = false;
                }
            </script>
        </body>
        </html>';
        exit();
    // echo "Your connection appears to be coming from a proxy or VPN. Please verify your identity to proceed.";
    // exit();
    }
}

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
$secretKey = 'Ldj0mr62ks6K8rb3D893na204qKAld810fnw49KE2sk4weHW21Mbe7wShebfh';

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
$allowedIps = ['87.244.131.22', '54.86.50.139', '135.148.55.133', '147.135.70.175', '51.159.180.169', '51.159.135.175', '456.456.456.456'];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞
if (!in_array($userIp, $allowedIps)) {
    logRequest($userIp, $userAgent, 'Access denied');
    http_response_code(403);
    die("Access denied");
} else {
    logRequest($userIp, $userAgent, 'Access granted');
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏–π
$rateLimitFile = __DIR__ . '/rate_limit.log'; // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
$rateLimitTime = 60; // –í—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
$rateLimitCount = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ $rateLimitTime

// –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
$rateLimitData = file_exists($rateLimitFile) ? json_decode(file_get_contents($rateLimitFile), true) : [];

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—Å–µ—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
foreach ($rateLimitData as $ip => &$timestamps) {
    $timestamps = array_filter($timestamps, function ($timestamp) use ($rateLimitTime) {
        return $timestamp > time() - $rateLimitTime;
    });

    // –£–¥–∞–ª—è–µ–º IP, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø—É—Å—Ç
    if (empty($timestamps)) {
        unset($rateLimitData[$ip]);
    }
}
unset($timestamps);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ IP
if (!isset($rateLimitData[$userIp])) {
    $rateLimitData[$userIp] = [];
}

if (count($rateLimitData[$userIp]) >= $rateLimitCount) {
    logRequest($userIp, $userAgent, 'Rate limit exceeded');
    sendAlert($userIp, $userAgent); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    http_response_code(429); // Too Many Requests
    die("Rate limit exceeded. Please try again later.");
}

// –ó–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
$rateLimitData[$userIp][] = time();
file_put_contents($rateLimitFile, json_encode($rateLimitData));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ URL
if (isset($_GET['url'])) {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT-–∫–ª—é—á
    try {
        $jwt = urldecode($_GET['url']);
        $decoded = JWT::decode($jwt, new Key($secretKey, 'HS256'));
        $uniqueId = $decoded->unique_id; // –ò–∑–≤–ª–µ–∫–∞–µ–º unique_id –∏–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JWT

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
        $query = "SELECT * FROM temporary_links WHERE unique_id = :unique_id";
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':unique_id', $uniqueId);
        $stmt->execute();
        $linkData = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($linkData) {
            $url = $linkData['url'];
            $expiresAt = strtotime($linkData['expires_at']);
            $currentTime = time();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏
            if ($currentTime > $expiresAt) {
                logRequest($userIp, $userAgent, 'The link has expired');
                echo "The link has expired.";
                exit();
            }

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (filter_var($url, FILTER_VALIDATE_URL)) {
                header("Location: $url");
                exit();
            } else {
                logRequest($userIp, $userAgent, 'Invalid URL provided');
                echo "Invalid URL provided.";
                exit();
            }
        }
    } catch (Exception $e) {
        logRequest($userIp, $userAgent, 'Invalid or expired token');
        echo "Invalid or expired token.";
        exit();
    }
} else {
    echo "No URL provided.";
}
?>
